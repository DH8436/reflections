What happens when you initialize a repository? Why do you need to do it?
  when you intialize a repository you are creating a hidden file to track the changes in your database. You need to do that to give yourself a starting point on manipulating your data.

How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area is a register for the files you're looking at this instance, not all at once. The repository is the commit itself and the working directory are the files how they exist.
	The value is that it bunches files and is very specific in detailing the reason these files relate and are being committed.

	Open with changes for 1st commit. added period. another period.

How can you use the staging area to make sure you have one commit per logical change?
Check you changes and double check the files included are part of the larger program operation, before committing changes.

What are some situations when branches would be helpful in keeping your history organized? How would  branches help?
	History if you made large changes and committed them or multiple types of logic to test.
How do the diagrams help you visualize the branch structure?
They help by running down the history and color coding the separate branches once i understand how it reads.
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
Merging 2 branches together combines separate sections of code in one common branch. The diagram shows diverging code paths and the point is to see one the instance when the paths combine.
	What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	Automatic merging is ok but I would rather manually merge so I have better control over the merging conflicts.
	